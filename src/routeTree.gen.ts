/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as MChar248nsterIndexRouteImport } from './routes/mønster/index'
import { Route as ElementerIndexRouteImport } from './routes/elementer/index'
import { Route as MChar248nsterPatternNameRouteImport } from './routes/mønster/$patternName'
import { Route as ElementerElementNameRouteImport } from './routes/elementer/$elementName'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const MChar248nsterIndexRoute = MChar248nsterIndexRouteImport.update({
  id: '/mønster/',
  path: '/mønster/',
  getParentRoute: () => rootRouteImport,
} as any)
const ElementerIndexRoute = ElementerIndexRouteImport.update({
  id: '/elementer/',
  path: '/elementer/',
  getParentRoute: () => rootRouteImport,
} as any)
const MChar248nsterPatternNameRoute =
  MChar248nsterPatternNameRouteImport.update({
    id: '/mønster/$patternName',
    path: '/mønster/$patternName',
    getParentRoute: () => rootRouteImport,
  } as any)
const ElementerElementNameRoute = ElementerElementNameRouteImport.update({
  id: '/elementer/$elementName',
  path: '/elementer/$elementName',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/elementer/$elementName': typeof ElementerElementNameRoute
  '/mønster/$patternName': typeof MChar248nsterPatternNameRoute
  '/elementer': typeof ElementerIndexRoute
  '/mønster': typeof MChar248nsterIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/elementer/$elementName': typeof ElementerElementNameRoute
  '/mønster/$patternName': typeof MChar248nsterPatternNameRoute
  '/elementer': typeof ElementerIndexRoute
  '/mønster': typeof MChar248nsterIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/elementer/$elementName': typeof ElementerElementNameRoute
  '/mønster/$patternName': typeof MChar248nsterPatternNameRoute
  '/elementer/': typeof ElementerIndexRoute
  '/mønster/': typeof MChar248nsterIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/elementer/$elementName'
    | '/mønster/$patternName'
    | '/elementer'
    | '/mønster'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/elementer/$elementName'
    | '/mønster/$patternName'
    | '/elementer'
    | '/mønster'
  id:
    | '__root__'
    | '/'
    | '/elementer/$elementName'
    | '/mønster/$patternName'
    | '/elementer/'
    | '/mønster/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ElementerElementNameRoute: typeof ElementerElementNameRoute
  MChar248nsterPatternNameRoute: typeof MChar248nsterPatternNameRoute
  ElementerIndexRoute: typeof ElementerIndexRoute
  MChar248nsterIndexRoute: typeof MChar248nsterIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/mønster/': {
      id: '/mønster/'
      path: '/mønster'
      fullPath: '/mønster'
      preLoaderRoute: typeof MChar248nsterIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/elementer/': {
      id: '/elementer/'
      path: '/elementer'
      fullPath: '/elementer'
      preLoaderRoute: typeof ElementerIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/mønster/$patternName': {
      id: '/mønster/$patternName'
      path: '/mønster/$patternName'
      fullPath: '/mønster/$patternName'
      preLoaderRoute: typeof MChar248nsterPatternNameRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/elementer/$elementName': {
      id: '/elementer/$elementName'
      path: '/elementer/$elementName'
      fullPath: '/elementer/$elementName'
      preLoaderRoute: typeof ElementerElementNameRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ElementerElementNameRoute: ElementerElementNameRoute,
  MChar248nsterPatternNameRoute: MChar248nsterPatternNameRoute,
  ElementerIndexRoute: ElementerIndexRoute,
  MChar248nsterIndexRoute: MChar248nsterIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
